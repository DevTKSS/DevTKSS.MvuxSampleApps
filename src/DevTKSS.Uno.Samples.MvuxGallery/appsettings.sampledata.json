{
  "DashboardCodeSampleOptions": {
    "C# in Model": {
      "Description": "This sample shows how to use a model with properties that are bound to the view. The model is a simple class with properties that are used in the view.",
      "FilePath": "Assets/Samples/ModelBinding-Sample.cs.txt",
      "LineRanges": []
    },
    "DI Service without Resw": {
      "Description": "This Service shows how you can use the ILocalizationService, to evaluate, which Localization Culture your App currently set to and use a switch expression to redirect the call to the equaling function for fetching the correctly localized data from.",
      "FilePath": "Assets/Samples/GalleryImageService-noResw.cs.txt",
      "LineRanges": []
    },
    "DI Service using Resw": {
      "Description": "This Service shows how you can use the IStringLocalizer, to fetch the correct localized Data from the Resources Dictionary. This way, we do not need to evaluate the culture before fetching, since it does it for us. Remark, that this approach requires us to define those to returned data in the Strings/<langTag>/Resources.resw files with keys, we are using the Image names for, since these will stay same independant of the culture. By that we are also able, to copy a whole Dictionary of those for adding a new culture localization and just have to update the underlieing data.",
      "FilePath": "Assets/Samples/GalleryImageService-resw.cs.txt",
      "LineRanges": []
    },
    "C# GalleryImage Record Definition": {
      "Description": "Here you can see, how to use a record definition with properties that are bound to the view. The record definition is a simple class with properties that are used in the view. That are a Title, Description and a Image sourced from Assets/Images as UnoImage via .csproj and Uno.Resizetizer",
      "FilePath": "Assets/Samples/GalleryImageModel.cs.txt",
      "LineRanges": []
    },
    "DataTemplate for GridView Content": {
      "Description": "This sample shows how to use a DataTemplate to define the content of a GridView. The DataTemplate is used to define how the data is displayed in the GridView. The DataTemplate is showing a Card Control from Uno.Toolkit.UI and is definied in a ResourcesDictionary loaded via MergedResourcesDictionaries.",
      "FilePath": "Assets/Samples/Card-GalleryImage.DataTemplate.xaml.txt",
      "LineRanges": []
    },
    "FeedView + GridView XAML": {
      "Description": "This sample shows how to use the FeedView control from Uno.Extensions.Reactive.UI. The FeedView usually is beeing used to let you bind to a Feed, ListFeed, State or ListState, which allows to Request a Refresh of the underlieing data. In this sample, we are using a GridView which then actually shows the Data, Binding to the depending Properties of the Records Definition. By default, if you dont explicitly tell the FeedView otherwhise, e.g. by <LoadingTemplate>, the DataTemplate defining the GridView, will be the <ValueTemplate> after fetching the Data.",
      "FilePath": "Assets/Samples/FeedView-GridView-Sample.xaml.txt",
      "LineRanges": []
    }
  },
  "MainCodeSampleOptions": {
    "NavigationView XAML": {
      "Description": "This sample shows how to use the NavigationView control from Uno.Extensions.Navigation.UI. The NavigationView is used to navigate between different pages in the app, but enables to do this just by using xaml, making it optional to do so with csharp.",
      "FilePath": "Assets/Samples/NavigationView-Sample.xaml.txt",
      "LineRanges": []
    },
    "Using IRouteNotifyer": {
      "Description": "This sample shows how to use the IRouteNotifyer interface to listen to Route changes from e.g. your Model. For this, you need to subscribe to the RouteChanged Event of it and get the Route Name from eventArgs.Navigator?.Route?.ToString().",
      "FilePath": "Assets/Samples/NavigationView-Sample.xaml.txt",
      "LineRanges": []
    }
  },
  "ListboardSampleConfiguration": {
    "FeedView + ListView XAML": {
      "Description": "This sample shows how to use the FeedView control from Uno.Extensions.Reactive.UI. The FeedView usually is beeing used to let you bind to a Feed, ListFeed, State or ListState, which allows to Request a Refresh of the underlieing data. In this sample, we are using a ListView which then actually shows the Data, Binding to the depending Properties of the Records Definition. By default, if you dont explicitly tell the FeedView otherwhise, e.g. by <LoadingTemplate>, the DataTemplate defining the ListView, will be the <ValueTemplate> after fetching the Data.",
      "FilePath": "Assets/Samples/FeedView-ListView-Sample.xaml.txt",
      "LineRanges": []
    },
    "Use Service to load Data from Storage": {
      "Description": "This sample shows how to use a service to load data from storage. The service is registered in the DI container and can be injected into the view model.",
      "FilePath": "Assets/Samples/Listboard-SampleViaService.cs.txt",
      "LineRanges": []
    },
    "DI Storage handling Service": {
      "FilePath": "Assets/Samples/Listboard-StorageService.cs.txt",
      "LineRanges": []
    },
    "Settings DataModel Definition": {
      "Description": "While DataModels used to load Data via IOptions can not be fully immutable, using init instead of set allows us to set the properties only once, when the object is created.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [
        {
          "Start": 1,
          "End": 13
        }
      ]
    },
    "Settings DataModel JsonContext": {
      "Description": "Define the JsonSerializerContext to load the code sample options configuration from the appsettings.json file.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [
        {
          "Start": 15,
          "End": 25
        }
      ]
    },
    "Settings Data in appsettings": {
      "Description": "Settings to find storage Data, can easily be stored in appsettings.json, since we can update them via IWritableOptions.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [
        {
          "Start": 27,
          "End": 63
        }
      ]
    },
    "XAML DataTemplate": {
      "Description": "The DataTemplate is used to define how the data is displayed in the ListView. The DataTemplate is showing a Card Control from Uno.Toolkit.UI and is definied in a ResourcesDictionary loaded via MergedResourcesDictionaries.",
      "FilePath": "Assets/Samples/Card-GalleryImage.DataTemplate.xaml.txt",
      "LineRanges": []
    }
  },
  "SimpleCardsCodeSampleOptions": {
      "Card Control XAML": {
        "Description": "This sample shows how to use the Card control from Uno.Toolkit.UI. The Card control is used to display a simple card with an title, image and description as SubHeader.",
        "FilePath": "Assets/Samples/SimpleCardsSample.xaml.txt",
        "LineRanges": []
      },
      "HeaderContent Template": {
        "Description": "This sample shows how to use the HeaderContent template from Uno.Toolkit.UI. The HeaderContent template is used to display a simple card with an title, image and description as SubHeader.",
        "FilePath": "Assets/Samples/Card-GalleryImage.DataTemplate.xaml.txt",
        "LineRanges": [
          {
            "Start": 32,
            "End": 40
          }
        ]
      },
      "MediaContent Template": {
        "Description": "This sample shows how to use the MediaContent template from Uno.Toolkit.UI. The MediaContent template is used to display e.g. with an Image Content.",
        "FilePath": "Assets/Samples/SimpleCardsSample.xaml.txt",
        "LineRanges": [
          {
            "Start": 43,
            "End": 48
          }
        ]
      }
    },
  "CounterCodeSampleOptions": {
      "View XAML": {
        "Description": "This sample shows how to use the Counter control from Uno.Toolkit.UI. The Counter control is used to display a simple counter with an increment and decrement button.",
        "FilePath": "Assets/Samples/CounterPage.xaml.txt",
        "LineRanges": []
      },
      "C# in CounterModel": {
        "Description": "This sample shows how to bind to the model holding the properties that data should get displayed.",
        "FilePath": "Assets/Samples/CounterModel.cs.txt",
        "LineRanges": []
      },
      "Countable Record": {
        "Description": "This Record Definition shows the possibility, to not only bind to static values, than also that this can hold functions you can work with in your view via x:Bind",
        "FilePath": "Assets/Samples/Countable.cs.txt",
        "LineRanges": []
      }
    }
}
