{
  "DashboardSampleConfiguration": {
    "C# in Model": {
      "Description": "This sample shows how to use a model with properties that are bound to the view. The model is a simple class with properties that are used in the view.",
      "FilePath": "Assets/Samples/ModelBinding-Sample.cs.txt",
      "LineRanges": []
    },
    "DI Service Resw": {
      "FilePath": "Assets/Samples/GalleryImageService-resw.cs.txt",
      "LineRanges": []
    },
    "DI Service without Resw": {
      "FilePath": "Assets/Samples/GalleryImageService-noResw.cs.txt",
      "LineRanges": []
    },
    "C# Record": {
      "FilePath": "Assets/Samples/GalleryImageModel.cs.txt",
      "LineRanges": []
    },
    "XAML DataTemplate": {
      "FilePath": "Assets/Samples/Card-GalleryImage.DataTemplate.xaml.txt",
      "LineRanges": []
    },
    "FeedView + GridView XAML": {
      "FilePath": "Assets/Samples/FeedView-GridView-Sample.xaml.txt",
      "LineRanges": []
    }
  },
  "MainSampleConfiguration": {
    "NavigationView XAML": {
      "Description": "This sample shows how to use the NavigationView control from Uno.Extensions.Navigation.UI. The NavigationView is used to navigate between different pages in the app, but enables to do this just by using xaml, making it optional to do so with csharp.",
      "FilePath": "Assets/Samples/MainPage.xaml.txt",
      "LineRanges": []
    }
  },
  "ListboardSampleConfiguration": {
    "FeedView + ListView XAML": {
      "Description": "",
      "FilePath": "Assets/Samples/FeedView-ListView-Sample.xaml.txt",
      "LineRanges": []
    },
    "Use Service to load Data from Storage": {
      "Description": "This sample shows how to use a service to load data from storage. The service is registered in the DI container and can be injected into the view model.",
      "FilePath": "Assets/Samples/Listboard-SampleViaService.cs.txt",
      "LineRanges": []
    },
    "DI Storage handling Service": {
      "FilePath": "Assets/Samples/Listboard-StorageService.cs.txt",
      "LineRanges": []
    },
    "Settings DataModel Definition": {
      "Description": "While DataModels used to load Data via IOptions can not be fully immutable, using init instead of set allows us to set the properties only once, when the object is created.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [ 1, 13 ]
    },
    "Settings DataModel JsonContext": {
      "Description": "Define the JsonSerializerContext to load the code sample options configuration from the appsettings.json file.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [ 15, 25 ]
    },
    "Settings Data in appsettings": {
      "Description": "Settings to find storage Data, can easily be stored in appsettings.json, since we can update them via IWritableOptions.",
      "FilePath": "Assets/Samples/CodeSample-Definition.cs.txt",
      "LineRanges": [ 27, 63]
    },
    "XAML DataTemplate": {
      "Description": "The DataTemplate is used to define how the data is displayed in the ListView. The DataTemplate is showing a Card Control from Uno.Toolkit.UI and is definied in a ResourcesDictionary loaded via MergedResourcesDictionaries.",
      "FilePath": "Assets/Samples/Card-GalleryImage.DataTemplate.xaml.txt",
      "LineRanges": []
    },
  },
  "SimpleCardsSampleConfiguration": {
    "Card Control XAML",
    "C# in SimpleCardsModel",
    "C# Record",
    "XAML DataTemplate"
  },
  "CounterSampleConfiguration": {
    "View XAML",
    "C# in CounterModel"
  }
}
